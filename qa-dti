#!/usr/bin/env python
"""
Usage:
    qa-dti <nifti> <bvec> <bval> <output_prefix> <accel>

Arguments:
    nifti:         4D nifti file of spherical phantom
    bvec:          bvec file from spherical phantom
    bval:          bval file from spherical phantom
    output_prefix: full path to output prefix
    accel:         y/n, y=nyquist accelerated data [default=n]

Details:
    Compute an FA map of the input file, and then runs the included
    'analyze_dti_phantom.m' script on these data.

    Outputs:
        <output_prefix>_stats.csv
        <output_prefix>_SNR_each-b0.csv
        <output_prefix>_SNR_each-DWI.csv
        <output_prefix>_nyq_each-b0.csv
        <output_prefix>_PXShift.csv
        <output_prefix>_b0_diff-roi-noise-hist.jpg
        <output_prefix>_b0_noise-hist.jpg
        <output_prefix>_DWI_diff-roi-noise-hist.jpg
        <output_prefix>_DWI_noise-hist.jpg
        <output_prefix>_SNR_avg-std.jpg
        <output_prefix>_SNR_individual.jpg
        <output_prefix>_SNR_Nyq_eachb0.jpg
        <output_prefix>_FAvalues.jpg

    Depends on FSL & MATLAB.

    Designed by Sofia Chavez, 2014-2015.
    Code packaged and maintained by Joseph Viviano, 2016.
"""
import os, sys
import tempfile
import shutil
import logging
import subprocess as proc

logging.basicConfig(level=logging.WARN, format="[%(name)s] %(levelname)s: %(message)s")
logger = logging.getLogger(os.path.basename(__file__))
tmpdir = tempfile.mkdtemp(prefix='qa-dti-')


def shutdown(returncode=0):
    """removes temporary files and exits"""
    shutil.rmtree(tmpdir)
    sys.exit(returncode)


def run(cmd):
    """Runs commands in a subshell and returns error messages if there is a problem."""
    p = proc.Popen(cmd, shell=True, stdout=proc.PIPE, stderr=proc.PIPE)
    out, err = p.communicate()

    if p.returncode != 0:
        logger.error('{} failed with returncode {}.\nSTDERR: {}'.format(cmd, p.returncode, err))
        shutdown(returncode=p.returncode)


def main(nifti, bvec, bval, output_prefix, accel='n'):
    """Runs FSL dtifit to generate an FA map before running analyze_dti_phantom.m"""

    logging.info('Starting')

    # check input options
    if accel not in {'y', 'n'}:
        logger.error("acceleration option must be 'y' or 'n', submitted '{}'".format(accel))
        shutdown(returncode=1)

    if not os.path.isdir(os.path.dirname(os.path.abspath(output_prefix))):
        logger.error('output directory {} does not exist.'.format(
            os.path.dirname(os.path.abspath(output_prefix))))
        shutdown(returncode=1)

    # preprocessing: make FA map
    run('fslroi {nifti} {t}/tmp_b0.nii.gz 0 1'.format(nifti=nifti, t=tmpdir))
    run('bet {t}/tmp_b0.nii.gz {t}/tmp_b0_bet.nii.gz -m -f 0.3 -R'.format(t=tmpdir))
    run('dtifit -k {nifti} -m {t}/tmp_b0_bet_mask.nii.gz -r {bvec} -b {bval} -o {t}/dtifit'.format(
                                   nifti=nifti, t=tmpdir, bvec=bvec, bval=bval))
    fa = os.path.join(tmpdir, 'dtifit_FA.nii.gz')
    if not os.path.isfile(fa):
        logger.error('ERROR: Failed to calculate FA from {}'.format(nifti))
        shutdown(returncode=1)

    # run analyze_dti_phantom.m (matlab script)
    matlab_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'matlab')
    cmd = (r"addpath(genpath('{}')); analyze_dti_phantom('{}','{}','{}','{}','{}')".format(
        matlab_path, nifti, fa, bval, output_prefix, accel))
    run('matlab -nodisplay -nosplash -r "{}"'.format(cmd))

    shutdown()


if __name__ == '__main__':
    if len(sys.argv) == 6:
        main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], accel=sys.argv[5])
    elif len(sys.argv) == 5:
        main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
    else:
        print(__doc__)

